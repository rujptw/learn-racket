#lang racket
(define atom?
  (lambda (x)
    (and (not (pair? x)) (not (null? x)))))
(define add1
    (lambda (n)
        (+ n 1)))

(define rember*
    (lambda (x lat)
    (cond
        ((null? lat) '())
        ((atom? (car lat))
            (cond
                ((eq? (car lat) x) (rember* x (cdr lat)))
                (else
                    (cons (car lat) (rember* x (cdr lat))))))
        (else
            (cons (rember* x (car lat)) (rember* x (cdr lat)))))))


(define x 'sauce)
(define lat '(((tomato sauce))
((bean) sauce)
(and ((flying)) sauce)))
(rember* x lat)

(define insertR
    (lambda (old new lat)
    (cond
        ((null? lat) '())
        ((atom? (car lat))
        (cond
            ((eq? (car lat) old) (cons old (cons new (insertR old new (cdr lat)))))
            (else
                (cons (car lat) (insertR old new (cdr lat))))))
        (else
            (cons (insertR old new (car lat)) (insertR old new (cdr lat)))))))
; (define new 'roast)
; (define old 'chuck)
; (define lat '((how  much  (wood)) could ((a  (wood) chuck)) (((chuck))) (if (a) ((wood chuck))) could chuck wood))
; (insertR old new lat)

(define occur*
    (lambda (x lat)
    (cond
        ((null? lat) 0)
        ((atom? (car lat))
        (cond
            ((eq? (car lat) x) (add1 (occur* x (cdr lat))))
            (else
                (occur* x (cdr lat)))))
        (else
            (+ (occur* x (car lat)) (occur* x (cdr lat)))))))
; (define n 'banana)
; (define lats '((banana)
; (split ((((banana  ice)))
; (cream (banana))
; sherbet))
; (banana)
; (bread)
; (banana brandy)))
; (occur* n lats)

(define subst*
    (lambda (old new lat)
        (cond
            ((null? lat) '())
            ((atom? (car lat))
            (cond
                ((eq? (car lat) old) (cons new (subst* old new (cdr lat))))
                (else
                    (cons (car lat) (subst* old new (cdr lat))))))
            (else
                (cons (subst* old new (car lat)) (subst* old new (cdr lat)))))))
; (define new 'orange)
; (define old 'banana)
; (define lats '((banana)(split ((((banana ice))) (cream  (banana)) sherbet) (banana) (bread)(banana brandy))))
; (subst* old new lats)

(define insertL
    (lambda (old new lat)
    (cond
        ((null? lat) '())
        ((atom? (car lat))
        (cond
            ((eq? (car lat) old) (cons new (insertL old new lat)))
            (else
                (cons (car lat) (insertL old new (cdr lat))))))
        (else
         (cons (insertL old new (car lat)) (insertL old new (cdr lat)))))))

(define new 'roast)
(define old 'chuck)
(define lats '((how  much  (wood)) could ((a  (wood) chuck)) (((chuck))) (if (a) ((wood chuck))) could chuck wood))
(insertL old new lats)
